https://www.hackerearth.com/practice/data-structures/arrays/multi-dimensional/practice-problems/algorithm/roy-and-symmetric-logos-1/

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: PROBLEM :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Problem
Roy likes Symmetric Logos.

How to check whether a logo is symmetric?
Align the center of logo with the origin of Cartesian plane. Now if the colored pixels of the logo are symmetric about both X-axis and Y-axis, then the logo is symmetric.

You are given a binary matrix of size N x N which represents the pixels of a logo.
1 indicates that the pixel is colored and 0 indicates no color.

For instance: Take a 5x5 matrix as follows:

01110
01010
10001
01010
01110
Graphically it is represented as follows:

enter image description here

Observe that it is symmetric about both X-axis and Y-axis.

Let's take another example of 5x5 matrix:

00100
01010
10001
01010
01110
Graphically it is represented as follows:

enter image description here

Now this logo is symmetric about Y-axis but it is not symmetric about X-axis.

Your task is to output YES if the logo is symmetric else output NO.

Input:
First line contains T - number of test cases.
T test cases follow.
First line of each test case contains the N - size of matrix.
Next N lines contains binary strings of length N.

Output:
Print YES or NO in a new line for each test case

Constraints:
1 ≤ T ≤ 10
2 ≤ N ≤ 32

Note: There will always be atleast 1 colored pixel in input data.

Sample Input
5
2
11
11
4
0101
0110
0110
0101
4
1001
0000
0000
1001
5
01110
01010
10001
01010
01110
5
00100
01010
10001
01010
01110
Sample Output
YES
NO
YES
YES
NO





:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: CODE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::




#include<iostream>

using namespace std;

typedef long long ll;


 

int main()

{

ll t;

cin>>t;

while(t--)

{

ll n;

int flag = 1;

cin>>n;

char a[n][n];

for(int i = 0; i<n; i++)

{

for(int j = 0; j<n; j++)

{

cin>>a[i][j];

}

}

for(int i = 0; i<n; i++)

{

if(flag==0) break;

for(int j = 0,k=n-1; j<n/2; j++,k--)

{

if((a[i][j]!=a[i][k]) || (a[j][i]!=a[k][i]))

{

flag = 0;

break;

}


 

}

}

if(flag)

cout<<"YES"<<endl;

else

cout<<"NO"<<endl;

}


 

}









::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 2nd course ::::::::::::::::::::::::::::::::::::::::::::::::::





#include <iostream>
using namespace std;
 
int main()
{
    int test_case;
 
    cin >> test_case;
 
    while (test_case != 0)
    {
        int size;
 
        cin >> size;
 
        int count1 = 0, count2 = 0;
 
        char arr[size][size];
 
       for (int i = 0; i < size; i++)
         {
             for (int j = 0; j < size; j++)
              {
                 cin >> arr[i][j];
              }
         }
 
      // Main logic
 
      for (int i = 0; i < size / 2; i++)
        {
            for (int j = 0; j < size; j++)
              {
                  if (arr[i][j] == arr[size - i - 1][j])
                      {
                          if (arr[j][i] == arr[j][size - i - 1])
                            {
                               count1++;
                               continue;
                             }
                         else
                               {
                                  count2++;
                                  break;
                               }
                     }
               else
                    {
                      count2++;
                      break;
                     }
             }
       }
     if (count1 > 0 && count2 == 0)
       {
          cout << "YES" << endl;
       }
     else
          cout << "NO" << endl;
 
     test_case--;
   }
 
 return 0;
}
