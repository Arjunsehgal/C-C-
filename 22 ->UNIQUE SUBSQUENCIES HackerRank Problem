                                                                          LINK :
  
  https://www.hackerearth.com/practice/algorithms/string-algorithm/basics-of-string-manipulation/practice-problems/algorithm/unique-subsequence-264057c9/
  
  
                                                                         PROBLEM :
  
  You are given a string  that contains  characters. Your task is to determine the maximum possible size of the subsequence  of  such that no two adjacent characters in  are the same.

Note: The string contains only lowercase English alphabets.

Input format

First line: A single integer  denoting the number of test cases
For each test case:
First line: Single integer  denoting the size of the string
Second line:  denoting the string
Output format

For each test case, print a single line containing one integer that represents the maximum size of the subsequence that satisfies the provided condition.

Constraints


Note: The sum of  overall test cases do not exceed .

Sample Input
2
5
ababa
5
aaaac

Sample Output
5
2




                                                                               CODE :




 #include<bits/stdc++.h>
using namespace std;
int main(){

	int t;
	cin>>t;
	
	while(t--){
		int n;
		int count =0;
		cin>>n;
       string str;
      cin>>str;
		for(int i=0;i<n;i++){
			if(str[i] != str[i+1]){
				count++;
			}
		}
		cout<< count <<endl;
		}
 	} 
  
